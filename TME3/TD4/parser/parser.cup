/* java -jar /usr/share/java/java_cup.jar -locations parser.cup */

package parser;

import java_cup.runtime.*;
import lexer.Lexer;
import ast.*;

terminal LPAREN, RPAREN, PLUS, MINUS, TIMES, DIV, MOD;

/***** Correction *****/
terminal POINT_INTERROGATION, DEUX_POINTS;

terminal String  IDENTIFIER;
terminal Integer INT;

/***** Correction *****/
non terminal Expr cexpr;

non terminal Expr expr;

precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;

/***** Correction *****/
start with cexpr;	/* inutile ici car on commence les regles par expr */

cexpr ::=
  expr:test POINT_INTERROGATION cexpr:altv DEUX_POINTS cexpr:altf
    {:
	RESULT = new TerOp("?:", test, altv, altf, testxleft, testxright);
    :}
  | expr:e {: RESULT = e; :}
;

expr ::=
  INT:n {: RESULT = new IntConst(n, nxleft, nxright); :}
  | IDENTIFIER:var {: RESULT = new EVar(var, varxleft, varxright); :}
  | expr:l PLUS expr:r {: RESULT = new BinOp("+", l, r, lxleft, rxright); :}
  | expr:l MINUS expr:r {: RESULT = new BinOp("-", l, r, lxleft, rxright); :}
  | expr:l TIMES expr:r {: RESULT = new BinOp("*", l, r, lxleft, rxright); :}
  | expr:l DIV expr:r {: RESULT = new BinOp("/", l, r, lxleft, rxright); :}
  | expr:l MOD expr:r {: RESULT = new BinOp("%", l, r, lxleft, rxright); :}
  | LPAREN expr:e RPAREN {: RESULT = e; :}
;
