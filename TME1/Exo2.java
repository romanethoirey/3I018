/* The following code was generated by JFlex 1.6.1 */

/*
	Generer l'analyseur lexical :   jflex Exo2.jflex
	Compiler avec :                 javac Exo2.java
	Executer avec :                 java Exo2
*/

/* (I) codes utilisateur */

class Token {
      int    id;
      Object valeur_associee;

      Token (int id) {
      	    this.id         = id;
	    valeur_associee = null;
      }
      
      Token (int id, Object valeur_associee) {
      	    this.id              = id;
	    this.valeur_associee = valeur_associee;
      }

      int getId () {
      	  return id;
      }

      Object getValeur () {
      	  return valeur_associee;
      }
}



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>../Exo2.jflex</tt>
 */
class Exo2 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\35\1\36\1\36\1\36\22\0\1\1\11\0\1\33"+
    "\1\15\1\0\1\12\1\13\1\32\1\7\1\10\1\24\1\25\1\26"+
    "\3\11\2\14\7\0\1\34\1\2\2\34\1\3\1\34\1\4\1\34"+
    "\1\5\4\34\1\6\14\34\6\0\1\30\1\17\1\31\1\16\1\20"+
    "\1\27\1\21\1\27\1\22\4\27\1\23\14\27\12\0\1\36\u1fa2\0"+
    "\1\36\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\3\4\2\5\1\6\2\2\5\7"+
    "\1\10\1\2\1\3\1\4\1\2\1\11\1\6\1\5"+
    "\2\2\1\6\2\12\11\7\2\10\1\13\1\10\1\2"+
    "\1\4\1\6\2\2\1\6\1\2\1\6\2\2\5\7"+
    "\1\13\1\10\2\13\1\10\2\13\1\2\1\0\1\4"+
    "\1\2\1\6\1\2\1\6\1\12\3\7\1\14\1\10"+
    "\2\4\3\13\1\10\1\13\1\15\1\0\1\16\1\17"+
    "\1\6\1\17\1\2\1\16\1\7\1\14\1\13\1\10"+
    "\1\2\1\13\1\15\1\12\1\14\2\2\2\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9"+
    "\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1"+
    "\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c\0\u047b\0\u049a\0\u04b9"+
    "\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0554\0\u0573\0\u0592"+
    "\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b\0\u068a"+
    "\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782"+
    "\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a"+
    "\0\u0899\0\u08b8\0\u08d7\0\u08f6\0\u0915\0\u0934\0\u0953\0\u0972"+
    "\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\37\0\u0a0d\0\174\0\u0a2c"+
    "\0\u0a4b\0\u0a6a\0\u0a89\0\u03a2\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05"+
    "\0\u0b24\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd"+
    "\0\u0c1c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\3\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\11\1\2\1\14\1\15\1\16\3\17"+
    "\3\11\1\17\1\20\1\21\1\22\1\2\1\6\1\23"+
    "\1\0\35\2\2\0\1\2\1\3\33\2\1\23\1\0"+
    "\2\2\1\6\1\24\3\6\7\2\2\6\1\24\3\6"+
    "\3\2\3\6\2\2\1\6\2\0\2\2\1\5\1\2"+
    "\3\5\7\2\2\5\1\2\3\5\3\2\3\5\2\2"+
    "\1\5\2\0\2\2\1\6\1\5\3\6\7\2\2\6"+
    "\1\5\3\6\3\2\3\6\2\2\1\6\2\0\3\2"+
    "\1\25\3\2\2\7\1\26\1\2\1\27\1\11\3\2"+
    "\1\25\3\2\3\26\6\2\2\0\3\2\1\25\3\2"+
    "\2\30\1\11\1\2\1\27\1\11\1\2\2\31\1\32"+
    "\3\31\1\33\2\11\3\31\3\2\2\0\3\2\1\25"+
    "\3\2\3\11\1\2\1\27\1\11\3\2\1\25\3\2"+
    "\3\11\6\2\2\0\7\2\3\11\1\2\1\13\1\11"+
    "\7\2\3\11\6\2\2\0\7\2\3\27\2\2\1\27"+
    "\7\2\3\27\6\2\2\0\2\2\1\6\1\5\3\6"+
    "\1\34\1\35\1\34\2\2\1\34\1\2\2\36\1\37"+
    "\3\36\3\34\3\36\2\2\1\6\2\0\2\2\1\6"+
    "\1\24\3\6\1\34\1\35\1\34\2\2\1\34\1\2"+
    "\2\36\1\40\3\36\3\34\3\36\2\2\1\6\2\0"+
    "\2\2\1\5\1\2\3\5\1\34\1\35\1\34\2\2"+
    "\1\34\1\2\2\37\1\41\3\42\3\34\1\42\1\43"+
    "\1\37\2\2\1\5\2\0\2\2\1\6\1\5\3\6"+
    "\1\34\1\35\1\34\2\2\1\34\1\2\2\36\1\42"+
    "\3\44\3\34\1\44\1\45\1\36\2\2\1\6\2\0"+
    "\2\2\1\6\1\5\3\6\1\34\1\35\1\34\2\2"+
    "\1\34\1\2\1\36\1\46\1\43\3\45\3\34\1\45"+
    "\2\36\2\2\1\6\2\0\2\2\1\6\1\5\3\6"+
    "\1\34\1\35\1\34\2\2\1\34\1\2\1\47\1\50"+
    "\1\51\3\47\3\34\1\47\1\52\1\47\2\2\1\6"+
    "\2\0\33\2\1\53\1\2\3\0\1\23\33\0\1\23"+
    "\1\0\2\2\1\5\1\2\1\54\2\5\7\2\2\5"+
    "\1\2\1\54\2\5\3\2\3\5\2\2\1\5\2\0"+
    "\7\2\3\55\1\56\1\2\1\55\1\56\6\2\3\55"+
    "\6\2\2\0\3\2\1\25\3\2\3\26\1\2\1\27"+
    "\1\11\3\2\1\25\3\2\3\26\6\2\2\0\3\2"+
    "\1\25\3\2\3\27\2\2\1\27\3\2\1\25\3\2"+
    "\3\27\6\2\2\0\3\2\1\25\3\2\2\30\1\11"+
    "\1\2\1\27\1\11\3\2\1\25\3\2\3\11\6\2"+
    "\2\0\16\2\6\31\1\57\2\2\3\31\3\2\2\0"+
    "\7\2\3\55\1\56\1\2\1\55\1\56\6\31\1\60"+
    "\2\55\3\31\3\2\2\0\3\2\1\25\3\2\3\11"+
    "\1\2\1\27\1\11\1\2\2\57\1\61\3\57\1\11"+
    "\1\62\1\11\3\57\3\2\2\0\16\2\6\63\3\2"+
    "\3\63\3\2\2\0\16\2\6\64\1\57\2\2\3\64"+
    "\3\2\2\0\2\2\1\6\1\5\3\6\1\2\1\31"+
    "\5\2\2\36\1\37\3\36\3\2\3\36\2\2\1\6"+
    "\2\0\2\2\1\5\1\2\3\5\1\2\1\31\5\2"+
    "\2\37\1\65\3\37\3\2\3\37\2\2\1\5\2\0"+
    "\2\2\1\5\1\2\1\54\2\5\1\2\1\31\5\2"+
    "\2\37\1\65\1\66\2\37\3\2\3\37\2\2\1\5"+
    "\2\0\10\2\1\31\5\2\2\65\4\41\3\2\1\41"+
    "\1\67\1\65\3\2\2\0\2\2\1\5\1\2\3\5"+
    "\1\2\1\31\5\2\2\37\1\41\3\42\3\2\1\42"+
    "\1\43\1\37\2\2\1\5\2\0\2\2\1\5\1\2"+
    "\3\5\1\2\1\31\5\2\1\37\1\70\1\67\3\43"+
    "\3\2\1\43\2\37\2\2\1\5\2\0\2\2\1\6"+
    "\1\5\3\6\1\2\1\31\5\2\2\36\1\42\3\44"+
    "\3\2\1\44\1\45\1\36\2\2\1\6\2\0\2\2"+
    "\1\6\1\5\3\6\1\2\1\31\5\2\1\36\1\46"+
    "\1\43\3\45\3\2\1\45\2\36\2\2\1\6\2\0"+
    "\2\2\1\6\1\5\3\6\1\2\1\31\5\2\2\36"+
    "\1\70\3\46\3\2\1\46\1\36\1\71\2\2\1\6"+
    "\2\0\2\2\1\6\1\5\3\6\1\2\1\31\5\2"+
    "\1\47\1\50\1\51\3\47\3\2\1\47\1\52\1\47"+
    "\2\2\1\6\2\0\2\2\1\6\1\5\3\6\1\2"+
    "\1\31\5\2\2\50\1\72\3\50\3\2\1\50\1\73"+
    "\1\50\2\2\1\6\2\0\2\2\1\5\1\2\3\5"+
    "\1\2\1\31\5\2\1\74\1\75\1\76\3\74\3\2"+
    "\1\74\1\77\1\74\2\2\1\5\2\0\2\2\1\6"+
    "\1\5\3\6\1\2\1\31\5\2\1\52\1\73\1\100"+
    "\3\52\3\2\3\52\2\2\1\6\2\0\33\53\1\101"+
    "\1\53\2\102\2\2\1\5\1\2\1\5\1\103\1\5"+
    "\7\2\2\5\1\2\1\5\1\103\1\5\3\2\3\5"+
    "\2\2\1\5\2\0\7\2\3\55\2\2\1\55\7\2"+
    "\3\55\6\2\2\0\16\2\6\57\1\2\1\104\1\2"+
    "\3\57\3\2\2\0\7\2\3\55\2\2\1\55\1\2"+
    "\6\57\1\55\1\105\1\55\3\57\3\2\2\0\7\2"+
    "\3\55\1\56\1\2\1\55\1\56\6\57\1\55\1\105"+
    "\1\55\3\57\3\2\2\0\3\2\1\25\3\2\3\11"+
    "\1\2\1\27\1\11\1\2\2\104\1\106\3\104\2\11"+
    "\1\107\3\104\3\2\2\0\7\2\3\34\2\2\1\34"+
    "\7\2\3\34\6\2\2\0\7\2\3\34\2\2\1\34"+
    "\1\2\6\31\1\110\2\34\3\31\3\2\2\0\10\2"+
    "\1\31\5\2\6\65\3\2\3\65\3\2\2\0\2\2"+
    "\1\5\1\2\1\5\1\103\1\5\1\2\1\31\5\2"+
    "\2\37\1\65\1\37\1\111\1\37\3\2\3\37\2\2"+
    "\1\5\2\0\10\2\1\31\5\2\1\65\1\112\4\67"+
    "\3\2\1\67\2\65\3\2\2\0\2\2\1\5\1\2"+
    "\3\5\1\2\1\31\5\2\2\37\1\112\3\70\3\2"+
    "\1\70\1\37\1\113\2\2\1\5\2\0\2\2\1\6"+
    "\1\5\3\6\1\2\1\31\5\2\1\114\1\36\1\113"+
    "\3\71\3\2\1\71\2\36\2\2\1\6\2\0\2\2"+
    "\1\5\1\2\3\5\1\2\1\31\5\2\2\75\1\115"+
    "\3\75\3\2\1\75\1\116\1\75\2\2\1\5\2\0"+
    "\2\2\1\6\1\5\3\6\1\2\1\31\5\2\2\73"+
    "\1\117\3\73\3\2\3\73\2\2\1\6\2\0\2\2"+
    "\1\5\1\2\3\5\1\2\1\31\5\2\1\74\1\75"+
    "\1\120\3\74\3\2\1\74\1\77\1\74\2\2\1\5"+
    "\2\0\2\2\1\5\1\2\3\5\1\2\1\31\5\2"+
    "\2\75\1\121\3\75\3\2\1\75\1\116\1\75\2\2"+
    "\1\5\2\0\10\2\1\31\5\2\1\76\1\115\1\122"+
    "\3\76\3\2\1\76\1\123\1\76\3\2\2\0\2\2"+
    "\1\5\1\2\3\5\1\2\1\31\5\2\1\77\1\116"+
    "\1\124\3\77\3\2\3\77\2\2\1\5\2\0\2\2"+
    "\1\5\1\2\3\5\1\2\1\31\5\2\1\77\1\116"+
    "\1\123\3\77\3\2\3\77\2\2\1\5\2\0\32\53"+
    "\1\125\1\101\1\53\35\102\1\126\3\102\2\2\1\5"+
    "\1\2\2\5\1\127\7\2\2\5\1\2\2\5\1\127"+
    "\3\2\3\5\2\2\1\5\2\0\16\2\6\104\2\2"+
    "\1\130\3\104\3\2\2\0\7\2\3\55\2\2\1\55"+
    "\1\2\6\104\2\55\1\131\3\104\3\2\2\0\7\2"+
    "\3\55\1\56\1\2\1\55\1\56\6\104\2\55\1\131"+
    "\3\104\3\2\2\0\3\2\1\25\3\2\3\11\1\2"+
    "\1\27\1\11\1\2\2\130\1\132\3\130\3\11\3\130"+
    "\3\2\2\0\16\2\6\133\1\2\1\104\1\2\3\133"+
    "\3\2\2\0\2\2\1\5\1\2\2\5\1\127\1\2"+
    "\1\31\5\2\2\37\1\65\2\37\1\134\3\2\3\37"+
    "\2\2\1\5\2\0\10\2\1\31\5\2\2\65\4\112"+
    "\3\2\1\112\1\65\1\135\3\2\2\0\2\2\1\5"+
    "\1\2\3\5\1\2\1\31\5\2\1\136\1\37\1\135"+
    "\3\113\3\2\1\113\2\37\2\2\1\5\2\0\2\2"+
    "\1\6\1\5\3\6\1\2\1\31\5\2\2\36\1\136"+
    "\3\114\3\2\1\114\2\36\2\2\1\6\2\0\10\2"+
    "\1\31\5\2\2\115\1\137\3\115\3\2\1\115\1\140"+
    "\1\115\3\2\2\0\2\2\1\5\1\2\3\5\1\2"+
    "\1\31\5\2\2\116\1\141\3\116\3\2\3\116\2\2"+
    "\1\5\2\0\2\2\1\5\1\2\3\5\1\2\1\31"+
    "\5\2\2\116\1\140\3\116\3\2\3\116\2\2\1\5"+
    "\2\0\10\2\1\31\5\2\1\120\1\121\4\120\3\2"+
    "\1\120\1\124\1\120\3\2\2\0\10\2\1\31\5\2"+
    "\6\121\3\2\1\121\1\141\1\121\3\2\2\0\10\2"+
    "\1\31\5\2\1\120\1\121\1\76\3\120\3\2\1\120"+
    "\1\124\1\120\3\2\2\0\10\2\1\31\5\2\1\123"+
    "\1\140\1\142\3\123\3\2\3\123\3\2\2\0\10\2"+
    "\1\31\5\2\1\124\1\141\4\124\3\2\3\124\3\2"+
    "\2\0\32\102\1\143\1\126\3\102\16\2\6\130\3\2"+
    "\3\130\3\2\2\0\7\2\3\55\2\2\1\55\1\2"+
    "\6\130\3\55\3\130\3\2\2\0\7\2\3\55\1\56"+
    "\1\2\1\55\1\56\6\130\3\55\3\130\3\2\2\0"+
    "\7\2\3\34\2\2\1\34\1\2\6\57\1\34\1\144"+
    "\1\34\3\57\3\2\2\0\10\2\1\31\5\2\1\145"+
    "\1\65\4\135\3\2\1\135\2\65\3\2\2\0\2\2"+
    "\1\5\1\2\3\5\1\2\1\31\5\2\2\37\1\145"+
    "\3\136\3\2\1\136\2\37\2\2\1\5\2\0\10\2"+
    "\1\31\5\2\2\121\1\115\3\121\3\2\1\121\1\141"+
    "\1\121\3\2\2\0\10\2\1\31\5\2\2\140\1\146"+
    "\3\140\3\2\3\140\3\2\2\0\10\2\1\31\5\2"+
    "\6\141\3\2\3\141\3\2\2\0\10\2\1\31\5\2"+
    "\1\124\1\141\1\123\3\124\3\2\3\124\3\2\41\0"+
    "\16\2\6\147\2\2\1\130\3\147\3\2\2\0\10\2"+
    "\1\31\5\2\2\65\4\145\3\2\1\145\2\65\3\2"+
    "\2\0\10\2\1\31\5\2\2\141\1\140\3\141\3\2"+
    "\3\141\3\2\2\0\7\2\3\34\2\2\1\34\1\2"+
    "\6\104\2\34\1\150\3\104\3\2\2\0\16\2\6\151"+
    "\3\2\3\151\3\2\2\0\7\2\3\34\2\2\1\34"+
    "\1\2\6\130\3\34\3\130\3\2\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3131];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\101\1\1\0\23\1\1\0\14\1\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
static final int ID_FIN     = 0;
static final int ID_RE1     = 1;
static final int ID_RE2     = 2;
static final int ID_RE3     = 3;
static final int ID_RE4     = 4;
static final int ID_RE5     = 5;
static final int ID_RE6     = 6;
static final int ID_RE7     = 7;
static final int ID_RE8     = 8;
static final int ID_RE9     = 9;
static final int ID_RE10    = 10;
static final int ID_RE11    = 11;
static final int ID_RE12    = 12;
static final int ID_RE13    = 13;
static final int ID_RE14    = 14;
static final int ID_INCONNU = 15;
public static void main(String argv[]) {
  Exo2 analyseur = new Exo2(new java.io.InputStreamReader(System.in));

  try {
    Token lu = analyseur.yylex();

    while (lu.getId() != YYEOF) {
      switch (lu.getId()) {
        case ID_FIN :
	  System.exit(0);
	case ID_INCONNU :
	  System.out.println("Expression rationnelle inconue " +
	  		     lu.getValeur());
          break;
	default :
	  System.out.println("Expression rationnelle RE" +
	  		     lu.getId() + " : " + lu.getValeur());
      }
      lu = analyseur.yylex();
    }
  } catch (Exception e) {}
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Exo2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Token(ID_FIN);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Token(ID_RE14, new String(yytext()));
            }
          case 16: break;
          case 2: 
            { return new Token(ID_INCONNU, new String(yytext()));
            }
          case 17: break;
          case 3: 
            { 
            }
          case 18: break;
          case 4: 
            { return new Token(ID_RE13, new String(yytext()));
            }
          case 19: break;
          case 5: 
            { return new Token(ID_RE2, new String(yytext()));
            }
          case 20: break;
          case 6: 
            { return new Token(ID_RE4, new String(yytext()));
            }
          case 21: break;
          case 7: 
            { return new Token(ID_RE7, new String(yytext()));
            }
          case 22: break;
          case 8: 
            { return new Token(ID_RE9, new String(yytext()));
            }
          case 23: break;
          case 9: 
            { return new Token(ID_RE3, new String(yytext()));
            }
          case 24: break;
          case 10: 
            { return new Token(ID_RE8, new String(yytext()));
            }
          case 25: break;
          case 11: 
            { return new Token(ID_RE12, new String(yytext()));
            }
          case 26: break;
          case 12: 
            { return new Token(ID_RE6, new String(yytext()));
            }
          case 27: break;
          case 13: 
            { return new Token(ID_RE11, new String(yytext()));
            }
          case 28: break;
          case 14: 
            { return new Token(ID_RE1, new String(yytext()));
            }
          case 29: break;
          case 15: 
            { return new Token(ID_RE5, new String(yytext()));
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
