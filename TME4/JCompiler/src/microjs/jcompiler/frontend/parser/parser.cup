package microjs.jcompiler.frontend.parser;

import java.util.List;
import java.util.LinkedList;

import java_cup.runtime.*;
import microjs.jcompiler.frontend.lexer.Lexer;
import microjs.jcompiler.frontend.ast.*;

terminal SEMICOL, VAR, LET, EQ,
         LPAREN, RPAREN, LCURLY, RCURLY,
         IF, ELSE,
         PLUS, MINUS, TIMES, DIV, EQEQ;
terminal PUIS;

terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;

non terminal Prog program;
non terminal List<Statement> statements, block;
non terminal Statement statement, opened_statement, closed_statement;
non terminal Expr expr;


precedence left EQEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence right PUIS;


program ::=
    statements:prog
	{: RESULT = new Prog("", prog, progxleft, progxright); :}
;


statements ::=
    statement:st
	{:
	   LinkedList<Statement> tmp = new LinkedList<Statement>();
	   if (st != null) {
	      tmp.add(st);
	   }
	   RESULT = tmp;
	:}
 | statements:sts  statement:st
	{:
	   if (st != null) {
	      ((LinkedList<Statement>) sts).add(st);
	   }
	   RESULT = sts;
	:}
;


statement ::=
    SEMICOL
	{:
	   RESULT = null;
	:}
  | opened_statement:ost  SEMICOL
	{:
	   RESULT = ost;
	:}
  | closed_statement:cst
	{:
	   RESULT = cst;
	:}
;


opened_statement ::=
    IDENTIFIER:id  EQ  expr:e
	{:
	   RESULT = new Assign(id, e, idxleft, exright);
	:}
  | VAR:v  IDENTIFIER:var  EQ  expr:e
	{:
	   RESULT = new Var(var, e, vxleft, exright);
	:}
  | LET:l  IDENTIFIER:var  EQ  expr:e
	{:
	   RESULT = new Let(var, e, null, lxleft, exright);
	:}
  | expr:e
	{:
	   RESULT = new VoidExpr(e, exleft, exright);
	:}
;


closed_statement ::=
    IF:i  LPAREN  expr:cond  RPAREN  block:thens
	{:
	   RESULT = new If(cond,
			   thens,
			   new LinkedList<Statement>(),
			   ixleft, thensxright);
	:}
  | IF:i  LPAREN  expr:cond  RPAREN  block:thens  ELSE  block:elses
	{:
	   RESULT = new If(cond, thens, elses, ixleft, elsesxright);
	:}
;


block ::=
    LCURLY  RCURLY
	{:
	   RESULT = new LinkedList<Statement>();
	:}
  | LCURLY  statements:sts  RCURLY
	{:
	   RESULT = sts;
	:}
;


expr ::=
    INT:n
	{:
	   RESULT = new IntConst(n, nxleft, nxright);
	:}
  | BOOL:b
	{:
	   RESULT = new BoolConst(b, bxleft, bxright);
	:}
  | IDENTIFIER:var
	{:
	   RESULT = new EVar(var, varxleft, varxright);
	:}
  | expr:l  PLUS  expr:r
	{:
	   RESULT = new BinOp("+", l, r, lxleft, rxright);
	:}
  | expr:l  MINUS  expr:r
	{:
	   RESULT = new BinOp("-", l, r, lxleft, rxright);
	:}
  | expr:l  TIMES  expr:r
	{:
	   RESULT = new BinOp("*", l, r, lxleft, rxright);
	:}
  | expr:l  DIV  expr:r
	{:
	   RESULT = new BinOp("/", l, r, lxleft, rxright);
	:}
  | expr:l  EQEQ  expr:r
	{:
	   RESULT = new BinOp("==", l, r, lxleft, rxright);
	:}
  | LPAREN  expr:e  RPAREN
	{:
	   RESULT = e;
	:}
  | expr:l  PUIS  expr:r
	{:
	   RESULT = new BinOp("**", l, r, lxleft, rxright);
	:}
;
