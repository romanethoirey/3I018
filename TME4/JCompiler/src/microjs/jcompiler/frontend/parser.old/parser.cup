package microjs.jcompiler.frontend.parser;

import java.util.List;
import java.util.LinkedList;

import java_cup.runtime.*;
import microjs.jcompiler.frontend.lexer.Lexer;
import microjs.jcompiler.frontend.ast.*;

terminal SEMICOL, VAR, LET, EQ,
         LPAREN, RPAREN, LCURLY, RCURLY,
         LBRACKET, RBRACKET, IF, ELSE, COMMA, FUNCTION,
         PLUS, MINUS, TIMES, DIV, RETURN, EQEQ,
         UMINUS, MOD;

terminal String IDENTIFIER;
terminal Integer INT;
terminal Boolean BOOL;

non terminal Prog program;
non terminal List<Statement> statements;
non terminal Statement statement;
non terminal Expr expr;

non terminal List<Statement> block;

non terminal List<String> parameters;

non terminal List<Expr> arguments;

precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence left UMINUS;

program ::=
  statements:prog                {: RESULT = new Prog("", prog, progxleft, progxright); :}
  ;
  
statements ::=
  statement:st SEMICOL statements:sts  {: ((LinkedList<Statement>) sts).addFirst(st); RESULT=sts; :}   
  | /* empty */  {: RESULT = new LinkedList<Statement>(); :}
  ;
    
statement ::=
  | IDENTIFIER:id EQ expr:e {: RESULT = new Assign(id, e, idxleft, exright); :}
  | VAR:v IDENTIFIER:var EQ expr:e  {: RESULT = new Var(var, e, vxleft, exright); :}
  | LET:l IDENTIFIER:var EQ expr:e SEMICOL statements:sts  {: RESULT = new Let(var, e, sts, lxleft, stsxright); :}
  | IF:i LPAREN expr:cond RPAREN block:thens ELSE block:elses
             {: RESULT = new If(cond, thens, elses, ixleft, elsesxright); :}
  | FUNCTION:f IDENTIFIER:id LPAREN parameters:params RPAREN block:body
             {: RESULT = new Function(id, params, body, fxleft, bodyxright); :}
  | expr:e {: RESULT = new VoidExpr(e, exleft, exright); :}
  | RETURN:r expr:e {: RESULT = new Return(e, rxleft, exright); :}
  ;
  
block ::=
  LCURLY statements:sts RCURLY {: RESULT = sts; :}
  ; 
  
parameters ::=
  IDENTIFIER:id COMMA parameters:params {: ((LinkedList<String>) params).addFirst(id); RESULT=params; :}
  | IDENTIFIER:id {: LinkedList<String> tempList = new LinkedList<String>();
                     tempList.add(id); RESULT = tempList; :}
  | /* empty */   {: RESULT = new LinkedList<String>(); :}
  ;
  
expr ::=
  INT:n {: RESULT = new IntConst(n, nxleft, nxright); :}
  | BOOL:b {: RESULT = new BoolConst(b, bxleft, bxright); :}
  | expr:fun LPAREN arguments:args RPAREN
          {: RESULT = new Funcall(fun, args, funxleft, argsxright); :}
  | IDENTIFIER:var {: RESULT = new EVar(var, varxleft, varxright); :}
  | expr:l PLUS expr:r {: RESULT = new BinOp("+", l, r, lxleft, rxright); :}
  | expr:l MINUS expr:r {: RESULT = new BinOp("-", l, r, lxleft, rxright); :}
  | expr:l TIMES expr:r {: RESULT = new BinOp("*", l, r, lxleft, rxright); :}
  | expr:l DIV expr:r {: RESULT = new BinOp("/", l, r, lxleft, rxright); :}
  | expr:l EQEQ expr:r {: RESULT = new BinOp("==", l, r, lxleft, rxright); :}
  | LPAREN expr:e RPAREN {: RESULT = e; :}
  ;
  
arguments ::=
  expr:e COMMA arguments:args {: ((LinkedList<Expr>) args).addFirst(e); RESULT = args; :}
  | expr:e  {: LinkedList<Expr> tempList = new LinkedList<Expr>();
               tempList.add(e); RESULT = tempList; :}
  | /* empty */  {: RESULT = new LinkedList<Expr>(); :}  
  ;  
